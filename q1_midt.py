# -*- coding: utf-8 -*-
"""q1_midT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ar6gWyC8eiCJh2akoJvf1SLH0D1BCLkC
"""

import gurobipy as gp
import pandas as pd
from gurobipy import GRB


def read_data():
    requirements_data = pd.read_csv("https://raw.githubusercontent.com/supragyabajpai/SchulichJourney_PredectiveModeling/main/nutrient_requirements.csv")
    content_data = pd.read_csv("https://raw.githubusercontent.com/supragyabajpai/SchulichJourney_PredectiveModeling/main/nutrient_content.csv")
    categories_data = pd.read_csv("https://raw.githubusercontent.com/supragyabajpai/SchulichJourney_PredectiveModeling/main/food_categories.csv")
    return requirements_data, content_data, categories_data

def create_model(requirements_data, content_data, categories_data):
    model = gp.Model("DietOptimizer")

    # Create variables
    food_quantities = model.addVars(categories_data["Food_Item"], name="Food")

    # Objective function: Minimize total cost
    model.setObjective(gp.quicksum(content_data.loc[j, "Cost_per_gram"] * food_quantities[food] for j, food in enumerate(categories_data["Food_Item"])), GRB.MINIMIZE)

    # Constraints
    # Nutritional balance
    for i, nutrient in enumerate(requirements_data["Nutrient"]):
        model.addConstr(gp.quicksum(content_data.loc[j, nutrient] * food_quantities[food] for j, food in enumerate(categories_data["Food_Item"])) >= requirements_data.loc[i, "Min_Requirement"], f"Min_{nutrient}")
        model.addConstr(gp.quicksum(content_data.loc[j, nutrient] * food_quantities[food] for j, food in enumerate(categories_data["Food_Item"])) <= requirements_data.loc[i, "Max_Requirement"], f"Max_{nutrient}")

    # Dietary preferences
    for preference in categories_data["Preference"].unique():
        model.addConstr(gp.quicksum(food_quantities[food] for food in categories_data[categories_data["Preference"] == preference]["Food_Item"]) <= categories_data[categories_data["Preference"] == preference]["Total"].values[0], f"Total_{preference}")

    # Variety: Proportion of each food item less than 3%
    for food in categories_data["Food_Item"]:
        model.addConstr(food_quantities[food] <= 0.03 * categories_data[categories_data["Preference"] == "All"]["Total"].values[0], f"Variety_{food}")

    return model

def optimize_model(model):
    model.optimize()

    if model.Status == GRB.OPTIMAL:
        print("Optimal solution found:")
        for food in model.getVars():
            quantity = food.X
            if quantity > 0:
                print(f"{food.varName}: {quantity} grams")
    else:
        print("No optimal solution found.")

def main():
    requirements_data, content_data, categories_data = read_data()
    model = create_model(requirements_data, content_data, categories_data)
    optimize_model(model)

if __name__ == "__main__":
    main()