#%%
import gurobipy as gp
from gurobipy import GRB

import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/supragyabajpai/SchulichJourney_PredectiveModeling/main/non_profits.csv')

# Extract alpha_i and beta_i values
alphas = data['alpha_i'].tolist()
betas = data['beta_i'].tolist()


def utility_function(e, a, alpha, beta):
    return alpha * a - 0.5 * e**2 + 2 * (e * beta * a)**0.5

def utility_function(e, a, alpha, beta):
    return alpha * a - 0.5 * e**2 + 2 * (e * beta * a)**0.5

def optimal_effort(a, beta):
    return (beta * a)**(1/3)


def optimal_output(a, beta):
    return 2 * (optimal_effort(a, beta) * beta * a)**0.5


import gurobipy as gb

# Create the optimization model
model = gb.Model("Nonprofit Allocation")

# Decision variables
N = len(alphas)
allocations = model.addVars(N, lb=0, vtype=gb.GRB.CONTINUOUS, name="Allocation")

# Objective function: Maximize total output
model.setObjective(gb.quicksum(optimal_output(allocations[i], betas[i]) for i in range(N)), gb.GRB.MAXIMIZE)

# Budget constraint: Total allocation cannot exceed $50 million
model.addConstr(gb.quicksum(allocations[i] for i in range(N)) <= 50000000, "Budget_Constraint")

# Step 7: Solve the optimization model
model.optimize()



# (f) Output value in the optimal allocation strategy
print("Output value in the optimal allocation strategy:", model.objVal)

# (g) Percentage of budget allocated in the optimal solution
print("Percentage of budget allocated in the optimal solution:", model.objVal / 50000000 * 100, "%")

# (h) Number of nonprofits receiving no funding
num_nonprofits_no_funding = sum(allocations[i].x == 0 for i in range(N))
print("Number of nonprofits receiving no funding:", num_nonprofits_no_funding)
